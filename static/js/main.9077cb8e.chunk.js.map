{"version":3,"sources":["components/Question/Question.js","seeddata/questions.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","question","questionText","answers","correctAnswer","useState","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","header","className","map","a","index","checked","disabled","inputId","name","value","onChange","e","answerIndex","indexOf","htmlFor","seedQuestions","App","questions","q","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAIe,SAASA,EAASC,GAAQ,IAAD,EACWA,EAAMC,SAA/CC,EAD8B,EAC9BA,aAAcC,EADgB,EAChBA,QAASC,EADO,EACPA,cADO,EAEMC,mBAAS,MAFf,mBAE/BC,EAF+B,KAEfC,EAFe,OAGJF,mBAAS,MAHL,mBAG/BG,EAH+B,KAGpBC,EAHoB,KAKhCC,EACJ,yBAAKC,UAAU,4EACZT,GA0BL,OACE,yBAAKS,UAAU,QACb,kBAAC,OAAD,CAAMD,OAAQA,GACXP,EAAQS,KAAI,SAACC,EAAGC,GAAJ,OACX,yBAAKH,UAAU,QACb,kBAAC,cAAD,CACEI,QAAST,IAAmBQ,EAC5BE,SAAwB,OAAdR,EACVS,QAASH,EACTI,KAAI,iBAAYJ,GAChBK,MAAOL,EACPM,SAAU,SAAAC,GAAC,OAjCIC,EAiCmBD,EAAEF,MAhC9CZ,EAAkBe,QAClBlB,EAAcmB,QAAQD,IAAgB,EAClCb,GAAa,GACbA,GAAa,IAJQ,IAAAa,KAmCjB,2BACEE,QAAO,iBAAYV,GACnBH,UAAU,4BAETE,SCtDf,IA2CeY,EA3CO,CACpB,CACEvB,aAAc,qCACdC,QAAS,CACP,iCACA,2BACA,2BACA,wCAEFC,cAAe,CAAC,IAElB,CACEF,aAAc,6BACdC,QAAS,CAAC,eAAgB,eAAgB,gCAC1CC,cAAe,CAAC,IAElB,CACEF,aACE,8HACFC,QAAS,CAAC,0BAA2B,QAAS,QAAS,UACvDC,cAAe,CAAC,IAElB,CACEF,aAAc,6CACdC,QAAS,CAAC,SAAU,OAAQ,QAAS,UACrCC,cAAe,CAAC,IAElB,CACEF,aAAc,qDACdC,QAAS,CACP,yBACA,4BACA,gCAEFC,cAAe,CAAC,IAElB,CACEF,aAAc,sCACdC,QAAS,CAAC,MAAO,MAAO,OAAQ,SAChCC,cAAe,CAAC,KClBLsB,MAhBf,WAAgB,IAAD,EACOrB,mBAASoB,GAAtBE,EADM,oBAGb,OACE,yBAAKhB,UAAU,sCACb,wBAAIA,UAAU,mEAAd,sBAEE,0BAAMA,UAAU,mBAAhB,uBAEDgB,EAAUf,KAAI,SAAAgB,GAAC,OACd,kBAAC7B,EAAD,CAAUE,SAAU2B,SCHRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9077cb8e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card } from \"primereact/card\";\nimport { RadioButton } from \"primereact/radiobutton\";\n\nexport default function Question(props) {\n  const { questionText, answers, correctAnswer } = props.question;\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n\n  const header = (\n    <div className=\"bg-indigo-700 text-xl white py-4 px-2 font-semibold uppercase text-white\">\n      {questionText}\n    </div>\n  );\n\n  const handleChooseAnswer = answerIndex => {\n    setSelectedAnswer(answerIndex);\n    correctAnswer.indexOf(answerIndex) >= 0\n      ? setIsCorrect(true)\n      : setIsCorrect(false);\n  };\n\n  // const footer = (\n  //   <span>\n  //     <Button\n  //       label=\"Save\"\n  //       icon=\"pi pi-check\"\n  //       style={{ marginRight: \".25em\" }}\n  //     />\n  //     <Button\n  //       label=\"Cancel\"\n  //       icon=\"pi pi-times\"\n  //       className=\"p-button-secondary\"\n  //     />\n  //   </span>\n  // );\n\n  return (\n    <div className=\"mb-4\">\n      <Card header={header}>\n        {answers.map((a, index) => (\n          <div className=\"mb-2\">\n            <RadioButton\n              checked={selectedAnswer === index ? true : false}\n              disabled={isCorrect !== null}\n              inputId={index}\n              name={`answer-${index}`}\n              value={index}\n              onChange={e => handleChooseAnswer(e.value)}\n            />\n            <label\n              htmlFor={`answer-${index}`}\n              className=\"p-radiobutton-label ml-4\"\n            >\n              {a}\n            </label>\n          </div>\n        ))}\n      </Card>\n    </div>\n  );\n}\n","const seedQuestions = [\n  {\n    questionText: \"JSON name/value pair is written as\",\n    answers: [\n      \"name’ : ‘value’\",\n      \"name = ‘value’\",\n      \"name = “value”\",\n      \"“name” : “value”\"\n    ],\n    correctAnswer: [3]\n  },\n  {\n    questionText: \"JSON strings have to be in\",\n    answers: [\"single quote\", \"double quote\", \"single quote or double quote\"],\n    correctAnswer: [1]\n  },\n  {\n    questionText:\n      \"In the below notation, Employee is of type { “Employee”: [ “Amy”, “Bob”, “John” ] }\",\n    answers: [\"Not a valid JSON string\", \"Array\", \"Class\", \"Object\"],\n    correctAnswer: [1]\n  },\n  {\n    questionText: \"Which of the following is not a JSON type?\",\n    answers: [\"Object\", \"date\", \"Array\", \"string\"],\n    correctAnswer: [1]\n  },\n  {\n    questionText: \"Which of these is correct about the JSON standard?\",\n    answers: [\n      \"It is an open standard\",\n      \"It is privately developed\",\n      \"It requires a license to use\"\n    ],\n    correctAnswer: [0]\n  },\n  {\n    questionText: \"What is the file extension of JSON?\",\n    answers: [\".jn\", \".js\", \".jsn\", \".json\"],\n    correctAnswer: [3]\n  }\n];\n\nexport default seedQuestions;\n","import React, { useState } from \"react\";\nimport Question from \"./components/Question/Question\";\n\nimport seedQuestions from \"./seeddata/questions\";\n\nfunction App() {\n  const [questions] = useState(seedQuestions);\n\n  return (\n    <div className=\"bg-gray-200 pt-8 px-4 min-h-screen\">\n      <h1 className=\"text-2xl sm:text-4xl font-bold text-gray-900 leading-tight mb-8\">\n        Quiz from anywhere.\n        <span className=\"text-indigo-500\"> Built Using React</span>\n      </h1>\n      {questions.map(q => (\n        <Question question={q} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// CSS dependencies for App\nimport \"./assets/main.css\";\nimport \"primereact/resources/themes/nova-light/theme.css\";\nimport \"primereact/resources/primereact.min.css\";\nimport \"primeicons/primeicons.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}